from collections import deque

def water_jug_problem():
    jug1_capacity, jug2_capacity = 3, 5
    initial_state = (0, 0)
    goal = 4

    queue = deque([initial_state])
    visited = set()
    visited.add(initial_state)

    parent_map = {initial_state: None}

    while queue:
        current_state = queue.popleft()
        x, y = current_state

        if x == goal or y == goal:
            path = []
            while current_state is not None:
                path.append(current_state)
                current_state = parent_map[current_state]
            return list(reversed(path))

        next_states = [
            (jug1_capacity, y),
            (x, jug2_capacity),
            (0, y),
            (x, 0),
            (max(0, x - (jug2_capacity - y)), min(jug2_capacity, x + y)),
            (min(jug1_capacity, x + y), max(0, y - (jug1_capacity - x)))
        ]

        for next_state in next_states:
            if next_state not in visited:
                visited.add(next_state)
                queue.append(next_state)
                parent_map[next_state] = current_state

    return "No solution found"

solution = water_jug_problem()
print("Solution path:", solution)
